--- drivers/misc/mediatek/cmdq/v2/cmdq_driver.c
+++ drivers/misc/mediatek/cmdq/v2/cmdq_driver.c
@@ -58,8 +58,6 @@ static const struct of_device_id cmdq_of_ids[] = {
 };
 #endif
 
-#define CMDQ_MAX_DUMP_REG_COUNT (2048)
-
 static dev_t gCmdqDevNo;
 static struct cdev *gCmdqCDev;
 static struct class *gCMDQClass;
@@ -275,6 +273,7 @@ static void cmdq_driver_process_read_address_request(cmdqReadAddressStruct *req_
 	do {
 		if (NULL == req_user ||
 		    0 == req_user->count ||
+		    req_user->count > CMDQ_MAX_DUMP_REG_COUNT ||
 		    NULL == CMDQ_U32_PTR(req_user->values) ||
 		    NULL == CMDQ_U32_PTR(req_user->dmaAddresses)) {
 			CMDQ_ERR("[READ_PA] invalid req_user\n");
@@ -328,19 +327,32 @@ static void cmdq_driver_process_read_address_request(cmdqReadAddressStruct *req_
 
 static long cmdq_driver_destroy_secure_medadata(cmdqCommandStruct *pCommand)
 {
+#ifdef CMDQ_SECURE_PATH_SUPPORT
 	if (pCommand->secData.addrMetadatas) {
 		kfree(CMDQ_U32_PTR(pCommand->secData.addrMetadatas));
 		pCommand->secData.addrMetadatas = (cmdqU32Ptr_t) (unsigned long)NULL;
 	}
-
+#endif
 	return 0;
 }
 
 static long cmdq_driver_create_secure_medadata(cmdqCommandStruct *pCommand)
 {
+#ifdef CMDQ_SECURE_PATH_SUPPORT
 	void *pAddrMetadatas = NULL;
-	const uint32_t length =
-	    (pCommand->secData.addrMetadataCount) * sizeof(cmdqSecAddrMetadataStruct);
+	uint32_t length;
+
+	if (pCommand->secData.addrMetadataCount >=
+		CMDQ_IWC_MAX_ADDR_LIST_LENGTH) {
+		CMDQ_ERR("Metadata %u reach the max allowed number = %u\n",
+			pCommand->secData.addrMetadataCount,
+			CMDQ_IWC_MAX_ADDR_LIST_LENGTH);
+		return -EOVERFLOW;
+	}
+
+	length = pCommand->secData.addrMetadataCount *
+		sizeof(struct cmdqSecAddrMetadataStruct);
+
 
 	/* verify parameter */
 	if ((false == pCommand->secData.is_secure) && (0 != pCommand->secData.addrMetadataCount)) {
@@ -388,7 +400,9 @@ static long cmdq_driver_create_secure_medadata(cmdqCommandStruct *pCommand)
 #if 0
 	cmdq_core_dump_secure_metadata(&(pCommand->secData));
 #endif
-
+#else
+	pCommand->secData.addrMetadatas = 0;
+#endif
 	return 0;
 }
 
@@ -403,6 +417,13 @@ static long cmdq_driver_process_command_request(cmdqCommandStruct *pCommand)
 		return -EFAULT;
 	}
 
+	if (pCommand->regRequest.count > CMDQ_MAX_DUMP_REG_COUNT)
+		return -EINVAL;
+
+	/* avoid copy large string */
+	if (pCommand->userDebugStrLen > CMDQ_MAX_DBG_STR_LEN)
+		pCommand->userDebugStrLen = CMDQ_MAX_DBG_STR_LEN;
+
 	/* allocate secure medatata */
 	status = cmdq_driver_create_secure_medadata(pCommand);
 	if (0 != status)
@@ -504,8 +525,8 @@ static long cmdq_ioctl(struct file *pFile, unsigned int code, unsigned long para
 {
 	struct cmdqCommandStruct command;
 	struct cmdqJobStruct job;
-	int count[CMDQ_MAX_ENGINE_COUNT];
-	struct TaskStruct *pTask;
+	int count[CMDQ_MAX_ENGINE_COUNT] = {0};
+	struct TaskStruct *pTask = NULL;
 	int32_t status;
 	struct cmdqJobResultStruct jobResult;
 	uint32_t *userRegValue = NULL;
@@ -518,6 +539,11 @@ static long cmdq_ioctl(struct file *pFile, unsigned int code, unsigned long para
 		if (copy_from_user(&command, (void *)param, sizeof(cmdqCommandStruct)))
 			return -EFAULT;
 
+		if (command.regRequest.count > CMDQ_MAX_DUMP_REG_COUNT ||
+			!command.blockSize ||
+			command.blockSize > CMDQ_MAX_COMMAND_SIZE)
+			return -EINVAL;
+
 		/* insert private_data for resource reclaim */
 		command.privateData = (cmdqU32Ptr_t) (unsigned long)(pFile->private_data);
 
@@ -537,6 +563,11 @@ static long cmdq_ioctl(struct file *pFile, unsigned int code, unsigned long para
 		if (copy_from_user(&job, (void *)param, sizeof(cmdqJobStruct)))
 			return -EFAULT;
 
+		if (job.command.regRequest.count > CMDQ_MAX_DUMP_REG_COUNT ||
+			!job.command.blockSize ||
+			job.command.blockSize > CMDQ_MAX_COMMAND_SIZE)
+			return -EINVAL;
+
 		/* backup */
 		userRegCount = job.command.regRequest.count;
 
@@ -548,6 +579,10 @@ static long cmdq_ioctl(struct file *pFile, unsigned int code, unsigned long para
 		if (0 != status)
 			return status;
 
+		/* avoid copy large string */
+		if (job.command.userDebugStrLen > CMDQ_MAX_DBG_STR_LEN)
+			job.command.userDebugStrLen = CMDQ_MAX_DBG_STR_LEN;
+
 		/* scenario id fixup */
 		cmdq_core_fix_command_scenario_for_user_space(&job.command);
 
@@ -590,11 +625,15 @@ static long cmdq_ioctl(struct file *pFile, unsigned int code, unsigned long para
 		}
 
 		/* verify job handle */
-		if (!cmdqIsValidTaskPtr((TaskStruct *) (unsigned long)jobResult.hJob)) {
+		pTask = cmdq_core_get_task_ptr((struct TaskStruct *)
+			(unsigned long)jobResult.hJob);
+		if (!pTask) {
 			CMDQ_ERR("invalid task ptr = 0x%llx\n", jobResult.hJob);
-			return -EFAULT;
+			return -EINVAL;
 		}
-		pTask = (TaskStruct *) (unsigned long)jobResult.hJob;
+
+		if (pTask->regCount > CMDQ_MAX_DUMP_REG_COUNT)
+			return -EINVAL;
 
 		/* utility service, fill the engine flag. */
 		/* this is required by MDP. */
@@ -971,12 +1010,6 @@ static int cmdq_probe(struct platform_device *pDevice)
 	}
 #endif
 
-	/* global ioctl access point (/proc/mtk_cmdq) */
-	if (NULL == proc_create(CMDQ_DRIVER_DEVICE_NAME, 0644, NULL, &cmdqOP)) {
-		CMDQ_ERR("CMDQ procfs node create failed\n");
-		return -EFAULT;
-	}
-
 	/* proc debug access point */
 	cmdq_create_debug_entries();
 
