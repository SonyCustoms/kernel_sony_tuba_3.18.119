--- drivers/misc/mediatek/imgsensor/inc/kd_imgsensor_define.h
+++ drivers/misc/mediatek/imgsensor/inc/kd_imgsensor_define.h
@@ -453,81 +500,6 @@ typedef struct {
 	MUINT32 Custom5DelayFrame;
 	MUINT16 SensorGrabStartX;
 	MUINT16 SensorGrabStartY;
-	MUINT16 SensorDrivingCurrent;
-	MUINT8 SensorMasterClockSwitch;
-	MUINT8 AEShutDelayFrame;    /* The frame of setting shutter default 0 for TG int */
-	MUINT8 AESensorGainDelayFrame;  /* The frame of setting sensor gain */
-	MUINT8 AEISPGainDelayFrame;
-	MUINT8 FrameTimeDelayFrame; /* The delay frame of setting frame length  */
-	MUINT8 MIPIDataLowPwr2HighSpeedTermDelayCount;
-	MUINT8 MIPIDataLowPwr2HighSpeedSettleDelayCount;
-	MUINT8 MIPICLKLowPwr2HighSpeedTermDelayCount;
-	MUINT8 SensorWidthSampling;
-	MUINT8 SensorHightSampling;
-	MUINT8 SensorPacketECCOrder;
-	SENSOR_MIPI_TYPE_ENUM MIPIsensorType;
-	MUINT8 SensorCaptureOutputJPEG; /* JPEG file or not? */
-	MUINT8 SensorModeNum;
-	MUINT8 IHDR_Support;
-	MUINT16 IHDR_LE_FirstLine;
-	MUINT8 ZHDR_Mode;
-	SENSOR_SETTLEDELAY_MODE_ENUM SettleDelayMode;
-	/*0: NO PDAF, 1: PDAF Raw Data mode, 2:PDAF VC mode(Full),
-	* 3:PDAF VC mode(Binning), 4: PDAF DualPD Raw Data mode, 5: PDAF DualPD VC mode
-	*/
-	MUINT8 PDAF_Support;
-	MUINT8 HDR_Support;/*0: NO HDR, 1: iHDR, 2:mvHDR, 3:zHDR*/
-	MUINT8 DPCM_INFO;
-	MUINT8 PerFrameCTL_Support;
-	SENSOR_SCAM_DATA_CHANNEL_ENUM SCAM_DataNumber;
-	MUINT8 SCAM_DDR_En;
-	MUINT8 SCAM_CLK_INV;
-	MUINT8 SCAM_DEFAULT_DELAY;
-	MUINT8 SCAM_CRC_En;
-	MUINT8 SCAM_SOF_src;
-	MUINT32 SCAM_Timout_Cali;
-	MUINT32 SensorMIPIDeskew;
-	MUINT16 SensorHorFOV;
-	MUINT16 SensorVerFOV;
-} ACDK_SENSOR_INFO_STRUCT, *PACDK_SENSOR_INFO_STRUCT;
-
-typedef struct {
-	MUINT16 SensorPreviewResolutionX;
-	MUINT16 SensorPreviewResolutionY;
-	MUINT16 SensorFullResolutionX;
-	MUINT16 SensorFullResolutionY;
-	MUINT8 SensorClockFreq; /* MHz */
-	MUINT8 SensorCameraPreviewFrameRate;
-	MUINT8 SensorVideoFrameRate;
-	MUINT8 SensorStillCaptureFrameRate;
-	MUINT8 SensorWebCamCaptureFrameRate;
-	MUINT8 SensorClockPolarity; /* SENSOR_CLOCK_POLARITY_HIGH/SENSOR_CLOCK_POLARITY_Low */
-	MUINT8 SensorClockFallingPolarity;
-	MUINT8 SensorClockRisingCount;  /* 0..15 */
-	MUINT8 SensorClockFallingCount; /* 0..15 */
-	MUINT8 SensorClockDividCount;   /* 0..15 */
-	MUINT8 SensorPixelClockCount;   /* 0..15 */
-	MUINT8 SensorDataLatchCount;    /* 0..15 */
-	MUINT8 SensorHsyncPolarity;
-	MUINT8 SensorVsyncPolarity;
-	MUINT8 SensorInterruptDelayLines;
-	MINT32 SensorResetActiveHigh;
-	MUINT32 SensorResetDelayCount;
-	ACDK_SENSOR_INTERFACE_TYPE_ENUM SensroInterfaceType;
-	ACDK_SENSOR_OUTPUT_DATA_FORMAT_ENUM SensorOutputDataFormat;
-	ACDK_SENSOR_MIPI_LANE_NUMBER_ENUM SensorMIPILaneNumber;
-	MUINT32 CaptureDelayFrame;
-	MUINT32 PreviewDelayFrame;
-	MUINT32 VideoDelayFrame;
-	MUINT32 HighSpeedVideoDelayFrame;
-	MUINT32 SlimVideoDelayFrame;
-	MUINT32 YUVAwbDelayFrame;
-	MUINT32 YUVEffectDelayFrame;
-	MUINT32 Custom1DelayFrame;
-	MUINT32 Custom2DelayFrame;
-	MUINT32 Custom3DelayFrame;
-	MUINT32 Custom4DelayFrame;
-	MUINT32 Custom5DelayFrame;
 	MUINT16 SensorGrabStartX_PRV;
 	MUINT16 SensorGrabStartY_PRV;
 	MUINT16 SensorGrabStartX_CAP;
@@ -570,11 +542,11 @@ typedef struct {
 	MUINT8 SensorModeNum;
 	MUINT8 IHDR_Support;
 	MUINT16 IHDR_LE_FirstLine;
+	MUINT8 TEMPERATURE_SUPPORT;
 	MUINT8 ZHDR_Mode;
 	SENSOR_SETTLEDELAY_MODE_ENUM SettleDelayMode;
 	/*0: NO PDAF, 1: PDAF Raw Data mode, 2:PDAF VC mode(Full),
-	*3:PDAF VC mode(Binning), 4: PDAF DualPD Raw Data mode, 5: PDAF DualPD VC mode
-	*/
+	3:PDAF VC mode(Binning), 4: PDAF DualPD Raw Data mode, 5: PDAF DualPD VC mode*/
 	MUINT8 PDAF_Support;
 	MUINT8 HDR_Support;/*0: NO HDR, 1: iHDR, 2:mvHDR, 3:zHDR*/
 	MUINT8 DPCM_INFO;
@@ -809,8 +805,9 @@ typedef struct {
 } SET_SENSOR_AWB_GAIN, *PSET_SENSOR_AWB_GAIN;
 
 typedef struct {
-	MUINT32 SENSOR_MODE;
-	MUINT32 ISO;
+    MUINT32 SENSOR_MODE;
+    MUINT32 ISO;
+
 } SET_SENSOR_ISO, *PSET_SENSOR_ISO;
 
 typedef struct {
@@ -885,8 +891,7 @@ typedef struct {
 	MUINT32 SensorId;   /* ID of sensor module */
 	SENSOR_REG_STRUCT SensorEngReg[MAXIMUM_SENSOR_ENG_REG_NUMBER];
 	SENSOR_REG_STRUCT SensorCCTReg[MAXIMUM_SENSOR_CCT_REG_NUMBER];
-	MUINT8 CameraData[MAXIMUM_NVRAM_CAMERA_SENSOR_FILE_SIZE_KERNEL / 2 - 8 -
-		 sizeof(SENSOR_REG_STRUCT) * (MAXIMUM_SENSOR_ENG_REG_NUMBER + MAXIMUM_SENSOR_CCT_REG_NUMBER)];
+	MUINT8 CameraData[MAXIMUM_NVRAM_CAMERA_SENSOR_FILE_SIZE_KERNEL / 2 - 8 - sizeof(SENSOR_REG_STRUCT) * (MAXIMUM_SENSOR_ENG_REG_NUMBER + MAXIMUM_SENSOR_CCT_REG_NUMBER)];
 } NVRAM_SENSOR_DATA_STRUCT, *PNVRAM_SENSOR_DATA_STRUCT;
 
 #define MAX_SENSOR_CAL_SIZE_KERNEL     (1024)   /* Byte */
@@ -1049,75 +1037,48 @@ typedef struct {
 /*******************************************************************************
 *
 ********************************************************************************/
-
-/*******************************************************************************
-*
-********************************************************************************/
-/* for new simplifed sensor driver */
 typedef struct {
-	MUINT32 (*SensorOpen)(void);
-	MUINT32 (*SensorGetInfo)(MUINT32 *pScenarioId[2],
-		MSDK_SENSOR_INFO_STRUCT * pSensorInfo[2], MSDK_SENSOR_CONFIG_STRUCT * pSensorConfigData[2]);
-	MUINT32 (*SensorGetResolution)(MSDK_SENSOR_RESOLUTION_INFO_STRUCT * pSensorResolution[2]);
-	MUINT32 (*SensorFeatureControl)(CAMERA_DUAL_CAMERA_SENSOR_ENUM InvokeCamera,
-		MSDK_SENSOR_FEATURE_ENUM FeatureId, MUINT8 *pFeaturePara, MUINT32 *pFeatureParaLen);
-	MUINT32 (*SensorControl)(MSDK_SCENARIO_ID_ENUM ScenarioId,
-		MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
-	MUINT32 (*SensorClose)(void);
+	MUINT32(*SensorOpen)(void);
+	MUINT32(*SensorGetInfo)(MUINT32 *pScenarioId[2], MSDK_SENSOR_INFO_STRUCT * pSensorInfo[2], MSDK_SENSOR_CONFIG_STRUCT * pSensorConfigData[2]);
+	MUINT32(*SensorGetResolution)(MSDK_SENSOR_RESOLUTION_INFO_STRUCT * pSensorResolution[2]);
+	MUINT32(*SensorFeatureControl)(CAMERA_DUAL_CAMERA_SENSOR_ENUM InvokeCamera, MSDK_SENSOR_FEATURE_ENUM FeatureId, MUINT8 *pFeaturePara, MUINT32 *pFeatureParaLen);
+	MUINT32(*SensorControl)(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
+	MUINT32(*SensorClose)(void);
 } MULTI_SENSOR_FUNCTION_STRUCT, *PMULTI_SENSOR_FUNCTION_STRUCT;
 
 typedef struct {
-	MUINT32 (*SensorOpen)(void);
-	MUINT32 (*SensorGetInfo)(MUINT32 *pScenarioId[2],
-		MSDK_SENSOR_INFO_STRUCT * pSensorInfo[2], MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData[2]);
-	MUINT32 (*SensorGetResolution)(MSDK_SENSOR_RESOLUTION_INFO_STRUCT * pSensorResolution[2]);
-	MUINT32 (*SensorFeatureControl)(CAMERA_DUAL_CAMERA_SENSOR_ENUM InvokeCamera,
-		MSDK_SENSOR_FEATURE_ENUM FeatureId, MUINT8 *pFeaturePara, MUINT32 *pFeatureParaLen);
-	MUINT32 (*SensorControl)(CAMERA_DUAL_CAMERA_SENSOR_ENUM InvokeCamera, MSDK_SCENARIO_ID_ENUM ScenarioId,
-		MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
-	MUINT32 (*SensorClose)(void);
+	MUINT32(*SensorOpen)(void);
+	MUINT32(*SensorGetInfo)(MUINT32 *pScenarioId[2], MSDK_SENSOR_INFO_STRUCT * pSensorInfo[2], MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData[2]);
+	MUINT32(*SensorGetResolution)(MSDK_SENSOR_RESOLUTION_INFO_STRUCT * pSensorResolution[2]);
+	MUINT32(*SensorFeatureControl)(CAMERA_DUAL_CAMERA_SENSOR_ENUM InvokeCamera, MSDK_SENSOR_FEATURE_ENUM FeatureId, MUINT8 *pFeaturePara, MUINT32 *pFeatureParaLen);
+	MUINT32(*SensorControl)(CAMERA_DUAL_CAMERA_SENSOR_ENUM InvokeCamera, MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
+	MUINT32(*SensorClose)(void);
 } MULTI_SENSOR_FUNCTION_STRUCT2, *PMULTI_SENSOR_FUNCTION_STRUCT2;
 
-
 typedef struct {
-	MUINT32 (*SensorOpen)(void);
-	MUINT32 (*SensorGetInfo)(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_INFO_STRUCT *pSensorInfo,
+	MUINT32(*SensorOpen)(void);
+	MUINT32(*SensorGetInfo)(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_INFO_STRUCT *pSensorInfo,
 				MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
-	MUINT32 (*SensorGetResolution)(MSDK_SENSOR_RESOLUTION_INFO_STRUCT *pSensorResolution);
-	MUINT32 (*SensorFeatureControl)(MSDK_SENSOR_FEATURE_ENUM FeatureId,
-		MUINT8 *pFeaturePara, MUINT32 *pFeatureParaLen);
-	MUINT32 (*SensorControl)(MSDK_SCENARIO_ID_ENUM ScenarioId,
-		MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
-	MUINT32 (*SensorClose)(void);
+	MUINT32(*SensorGetResolution)(MSDK_SENSOR_RESOLUTION_INFO_STRUCT *pSensorResolution);
+	MUINT32(*SensorFeatureControl)(MSDK_SENSOR_FEATURE_ENUM FeatureId, MUINT8 *pFeaturePara, MUINT32 *pFeatureParaLen);
+	MUINT32(*SensorControl)(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
+	MUINT32(*SensorClose)(void);
 #if 1 /* isp suspend resume patch */
 	MSDK_SCENARIO_ID_ENUM ScenarioId;
 	MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT imageWindow;
 	MSDK_SENSOR_CONFIG_STRUCT sensorConfigData;
+	SENSOR_STATE_ENUM sensorState;
 #endif
+	MUINT8  arch;
+	void   *psensor_inst; /* IMGSENSOR_SENSOR_INST */
 } SENSOR_FUNCTION_STRUCT, *PSENSOR_FUNCTION_STRUCT;
 
 typedef struct {
 	MUINT32 SensorId;
 	MUINT8 drvname[32];
-	MUINT32 (*SensorInit)(PSENSOR_FUNCTION_STRUCT *pfFunc);
+	MUINT32(*SensorInit)(PSENSOR_FUNCTION_STRUCT *pfFunc);
 } ACDK_KD_SENSOR_INIT_FUNCTION_STRUCT, *PACDK_KD_SENSOR_INIT_FUNCTION_STRUCT;
 
-#define KDIMGSENSOR_DUAL_SHIFT 16
-#define KDIMGSENSOR_DUAL_MASK_MSB 0xFFFF0000
-#define KDIMGSENSOR_DUAL_MASK_LSB 0x0000FFFF
-
-#define KDIMGSENSOR_NOSENSOR    "non_sensor"
-#ifdef MTK_SUB2_IMGSENSOR
-#define KDIMGSENSOR_MAX_INVOKE_DRIVERS  (3)
-#define KDIMGSENSOR_INVOKE_DRIVER_0     (0)
-#define KDIMGSENSOR_INVOKE_DRIVER_1     (1)
-#define KDIMGSENSOR_INVOKE_DRIVER_2     (2)
-#else
-#define KDIMGSENSOR_MAX_INVOKE_DRIVERS  (2)
-#define KDIMGSENSOR_INVOKE_DRIVER_0     (0)
-#define KDIMGSENSOR_INVOKE_DRIVER_1     (1)
-#endif
-
 /* For sensor synchronize the exposure time / sensor gain and isp gain. */
 typedef struct {
 	MUINT16 u2ISPNewRGain;
