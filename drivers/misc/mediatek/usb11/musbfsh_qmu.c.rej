--- drivers/misc/mediatek/usb11/musbfsh_qmu.c
+++ drivers/misc/mediatek/usb11/musbfsh_qmu.c
@@ -70,12 +71,12 @@ void musbfsh_disable_q_all(struct musbfsh *musbfsh)
 	QMU_WARN("disable_q_all\n");
 
 	for (ep_num = 1; ep_num <= RXQ_NUM; ep_num++) {
-		if (mtk_is_qmu_enabled(ep_num, RXQ))
-			mtk_disable_q(musb, ep_num, 1);
+		if (mtk11_is_qmu_enabled(ep_num, RXQ))
+			mtk11_disable_q(musbfsh, ep_num, 1);
 	}
 	for (ep_num = 1; ep_num <= TXQ_NUM; ep_num++) {
-		if (mtk_is_qmu_enabled(ep_num, TXQ))
-			mtk_disable_q(musb, ep_num, 0);
+		if (mtk11_is_qmu_enabled(ep_num, TXQ))
+			mtk11_disable_q(musbfsh, ep_num, 0);
 	}
 }
 
@@ -88,12 +89,12 @@ irqreturn_t musbfsh_q_irq(struct musbfsh *musbfsh)
 	QMU_INFO("wQmuVal:%d\n", wQmuVal);
 	for (i = 1; i <= MAX_QMU_EP; i++) {
 		if (wQmuVal & DQMU_M_RX_DONE(i))
-			h_qmu_done_rx(musb, i);
+			h_mtk11_qmu_done_rx(musbfsh, i);
 
 		if (wQmuVal & DQMU_M_TX_DONE(i))
-			h_qmu_done_tx(musb, i);
+			h_mtk11_qmu_done_tx(musbfsh, i);
 	}
-	mtk_qmu_irq_err(musb, wQmuVal);
+	mtk11_qmu_irq_err(musbfsh, wQmuVal);
 
 	return retval;
 }
@@ -101,15 +102,15 @@ irqreturn_t musbfsh_q_irq(struct musbfsh *musbfsh)
 void musbfsh_flush_qmu(u32 ep_num, u8 isRx)
 {
 	QMU_DBG("flush %s(%d)\n", isRx ? "RQ" : "TQ", ep_num);
-	mtk_qmu_stop(ep_num, isRx);
-	qmu_reset_gpd_pool(ep_num, isRx);
+	mtk11_qmu_stop(ep_num, isRx);
+	mtk11_qmu_reset_gpd_pool(ep_num, isRx);
 }
 
 void musbfsh_restart_qmu(struct musbfsh *musbfsh, u32 ep_num, u8 isRx)
 {
 	QMU_DBG("restart %s(%d)\n", isRx ? "RQ" : "TQ", ep_num);
-	flush_ep_csr(musb, ep_num, isRx);
-	mtk_qmu_enable(musb, ep_num, isRx);
+	mtk11_flush_ep_csr(musbfsh, ep_num, isRx);
+	mtk11_qmu_enable(musbfsh, ep_num, isRx);
 }
 
 bool musbfsh_is_qmu_stop(u32 ep_num, u8 isRx)
@@ -195,80 +196,80 @@ int mtk11_kick_CmdQ(struct musbfsh *musbfsh, int isRx, struct musb_qh *qh, struc
 		return -1; /*KOBE : should we return a value */
 	}
 
-	if (!mtk_is_qmu_enabled(hw_ep->epnum, isRx)) {
-		DBG(4, "! mtk_is_qmu_enabled\n");
+	if (!mtk11_is_qmu_enabled(hw_ep->epnum, isRx)) {
+		INFO("! mtk_is_qmu_enabled\n");
 
 		musbfsh_ep_select(mbase, hw_ep->epnum);
-		flush_ep_csr(musb, hw_ep->epnum,  isRx);
+		mtk11_flush_ep_csr(musbfsh, hw_ep->epnum,  isRx);
 
 		if (isRx) {
-			DBG(4, "isRX = 1\n");
+			INFO("isRX = 1\n");
 			if (qh->type == USB_ENDPOINT_XFER_ISOC) {
-				DBG(4, "USB_ENDPOINT_XFER_ISOC\n");
+				INFO("USB_ENDPOINT_XFER_ISOC\n");
 				if (qh->hb_mult == 3)
-					musbfsh_writew(epio, MUSB_RXMAXP, qh->maxpacket|0x1000);
+					musbfsh_writew(epio, MUSBFSH_RXMAXP, qh->maxpacket|0x1000);
 				else if (qh->hb_mult == 2)
-					musbfsh_writew(epio, MUSB_RXMAXP, qh->maxpacket|0x800);
+					musbfsh_writew(epio, MUSBFSH_RXMAXP, qh->maxpacket|0x800);
 				else
-					musbfsh_writew(epio, MUSB_RXMAXP, qh->maxpacket);
+					musbfsh_writew(epio, MUSBFSH_RXMAXP, qh->maxpacket);
 			} else {
-				DBG(4, "!! USB_ENDPOINT_XFER_ISOC\n");
-				musbfsh_writew(epio, MUSB_RXMAXP, qh->maxpacket);
+				INFO("!! USB_ENDPOINT_XFER_ISOC\n");
+				musbfsh_writew(epio, MUSBFSH_RXMAXP, qh->maxpacket);
 			}
 
-			musbfsh_writew(epio, MUSB_RXCSR, MUSB_RXCSR_DMAENAB);
+			musbfsh_writew(epio, MUSBFSH_RXCSR, MUSBFSH_RXCSR_DMAENAB);
 			/*CC: speed */
-			musbfsh_writeb(epio, MUSB_RXTYPE, qh->type_reg);
-			musbfsh_writeb(epio, MUSB_RXINTERVAL, qh->intv_reg);
+			musbfsh_writeb(epio, MUSBFSH_RXTYPE, qh->type_reg);
+			musbfsh_writeb(epio, MUSBFSH_RXINTERVAL, qh->intv_reg);
 
 			if (musbfsh->is_multipoint) {
-				DBG(4, "is_multipoint\n");
-				musb_write_rxfunaddr(musbfsh->mregs, hw_ep->epnum, qh->addr_reg);
-				musb_write_rxhubaddr(musbfsh->mregs, hw_ep->epnum, qh->h_addr_reg);
-				musb_write_rxhubport(musbfsh->mregs, hw_ep->epnum, qh->h_port_reg);
+				INFO("is_multipoint\n");
+				musbfsh_write_rxfunaddr(musbfsh->mregs, hw_ep->epnum, qh->addr_reg);
+				musbfsh_write_rxhubaddr(musbfsh->mregs, hw_ep->epnum, qh->h_addr_reg);
+				musbfsh_write_rxhubport(musbfsh->mregs, hw_ep->epnum, qh->h_port_reg);
 			} else {
-				DBG(4, "!! is_multipoint\n");
-				musbfsh_writeb(musbfsh->mregs, MUSB_FADDR, qh->addr_reg);
+				INFO("!! is_multipoint\n");
+				musbfsh_writeb(musbfsh->mregs, MUSBFSH_FADDR, qh->addr_reg);
 			}
 
 			/*turn off intrRx*/
-			intr_e = musbfsh_readw(musbfsh->mregs, MUSB_INTRRXE);
+			intr_e = musbfsh_readw(musbfsh->mregs, MUSBFSH_INTRRXE);
 			intr_e = intr_e & (~(1<<(hw_ep->epnum)));
-			musbfsh_writew(musbfsh->mregs, MUSB_INTRRXE, intr_e);
+			musbfsh_writew(musbfsh->mregs, MUSBFSH_INTRRXE, intr_e);
 		} else {
-			musbfsh_writew(epio, MUSB_TXMAXP, qh->maxpacket);
-			musbfsh_writew(epio, MUSB_TXCSR, MUSB_TXCSR_DMAENAB);
+			musbfsh_writew(epio, MUSBFSH_TXMAXP, qh->maxpacket);
+			musbfsh_writew(epio, MUSBFSH_TXCSR, MUSBFSH_TXCSR_DMAENAB);
 			/*CC: speed?*/
-			musbfsh_writeb(epio, MUSB_TXTYPE, qh->type_reg);
-			musbfsh_writeb(epio, MUSB_TXINTERVAL, qh->intv_reg);
+			musbfsh_writeb(epio, MUSBFSH_TXTYPE, qh->type_reg);
+			musbfsh_writeb(epio, MUSBFSH_TXINTERVAL, qh->intv_reg);
 
 			if (musbfsh->is_multipoint) {
-				DBG(4, "is_multipoint\n");
+				INFO("is_multipoint\n");
 				musbfsh_write_txfunaddr(mbase, hw_ep->epnum, qh->addr_reg);
 				musbfsh_write_txhubaddr(mbase, hw_ep->epnum, qh->h_addr_reg);
 				musbfsh_write_txhubport(mbase, hw_ep->epnum, qh->h_port_reg);
 				/* FIXME if !epnum, do the same for RX ... */
 			} else {
-				DBG(4, "!! is_multipoint\n");
-				musbfsh_writeb(mbase, MUSB_FADDR, qh->addr_reg);
+				INFO("!! is_multipoint\n");
+				musbfsh_writeb(mbase, MUSBFSH_FADDR, qh->addr_reg);
 			}
-			/* turn off intrTx , but this will be revert by musb_ep_program*/
-			intr_e = musbfsh_readw(musbfsh->mregs, MUSB_INTRTXE);
+			/* turn off intrTx , but this will be revert by musbfsh_ep_program*/
+			intr_e = musbfsh_readw(musbfsh->mregs, MUSBFSH_INTRTXE);
 			intr_e = intr_e & (~(1<<hw_ep->epnum));
-			musbfsh_writew(musbfsh->mregs, MUSB_INTRTXE, intr_e);
+			musbfsh_writew(musbfsh->mregs, MUSBFSH_INTRTXE, intr_e);
 		}
 
-		DBG(4, "mtk_qmu_enable\n");
-		mtk_qmu_enable(musb, hw_ep->epnum, isRx);
+		INFO("mtk11_qmu_enable\n");
+		mtk11_qmu_enable(musbfsh, hw_ep->epnum, isRx);
 	}
 
-	gdp_free_count = qmu_free_gpd_count(isRx, hw_ep->epnum);
+	gdp_free_count = mtk11_qmu_free_gpd_count(isRx, hw_ep->epnum);
 	if (qh->type == USB_ENDPOINT_XFER_ISOC) {
-		DBG(4, "USB_ENDPOINT_XFER_ISOC\n");
+		INFO("USB_ENDPOINT_XFER_ISOC\n");
 		pBuffer = (uint8_t *)urb->transfer_dma;
 
 		if (gdp_free_count < urb->number_of_packets) {
-			DBG(0, "gdp_free_count:%d, number_of_packets:%d\n", gdp_free_count, urb->number_of_packets);
+			INFO("gdp_free_count:%d, number_of_packets:%d\n", gdp_free_count, urb->number_of_packets);
 			BUG();
 		}
 		for (i = 0; i < urb->number_of_packets; i++) {
