--- drivers/misc/mediatek/gpu/gpu_mali/mali_midgard/mali-r12p1/drivers/gpu/arm/midgard/mali_kbase_mem_pool.c
+++ drivers/misc/mediatek/gpu/gpu_mali/mali_midgard/mali-r12p1/drivers/gpu/arm/midgard/mali_kbase_mem_pool.c
@@ -82,7 +82,10 @@ static void kbase_mem_pool_add_locked(struct kbase_mem_pool *pool,
 	list_add(&p->lru, &pool->page_list);
 	pool->cur_size++;
 
+	/* Mark-off by MTK, mali cache should not be counted in SLAB */
+	/*
 	zone_page_state_add(1, page_zone(p), NR_SLAB_RECLAIMABLE);
+	*/
 
 	pool_dbg(pool, "added page\n");
 }
@@ -97,13 +100,17 @@ static void kbase_mem_pool_add(struct kbase_mem_pool *pool, struct page *p)
 static void kbase_mem_pool_add_list_locked(struct kbase_mem_pool *pool,
 		struct list_head *page_list, size_t nr_pages)
 {
-	struct page *p;
+	/* Mark-off by MTK, mali cache should not be counted in SLAB */
+	/* struct page *p; */
 
 	lockdep_assert_held(&pool->pool_lock);
 
+	/* Mark-off by MTK, mali cache should not be counted in SLAB */
+	/*
 	list_for_each_entry(p, page_list, lru) {
 		zone_page_state_add(1, page_zone(p), NR_SLAB_RECLAIMABLE);
 	}
+	*/
 
 	list_splice(page_list, &pool->page_list);
 	pool->cur_size += nr_pages;
@@ -132,7 +139,10 @@ static struct page *kbase_mem_pool_remove_locked(struct kbase_mem_pool *pool)
 	list_del_init(&p->lru);
 	pool->cur_size--;
 
+	/* Mark-off by MTK, mali cache should not be counted in SLAB */
+	/*
 	zone_page_state_add(-1, page_zone(p), NR_SLAB_RECLAIMABLE);
+	*/
 
 	pool_dbg(pool, "removed page\n");
 
@@ -589,9 +599,13 @@ void kbase_mem_pool_free_pages(struct kbase_mem_pool *pool, size_t nr_pages,
 			continue;
 
 		p = phys_to_page(pages[i]);
+
+		/* Mark-off by MTK, mali cache should not be counted in SLAB */
+		/*
 		if (reclaimed)
 			zone_page_state_add(-1, page_zone(p),
 					NR_SLAB_RECLAIMABLE);
+		*/
 
 		kbase_mem_pool_free_page(pool, p);
 		pages[i] = 0;
